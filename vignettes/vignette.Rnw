% Created 2014-10-14 Tue 12:34
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{marvosym}
\usepackage{wasysym}
\usepackage{amssymb}
\usepackage{hyperref}
\tolerance=1000
\usepackage{fullpage}
\author{Chris Wallace}
\date{\today}
\title{annotSnpStats: a package for annotated SnpMatrix objects}
\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.7c)}}
\begin{document}

\maketitle
\tableofcontents

%\VignetteIndexEntry{annotated SnpMatrix objects}

\section{Introduction}
\label{sec-1}

\texttt{annotSnpStats} defines the \texttt{aSnpMatrix} and \texttt{aXSnpMatrix} classes
which extend the \texttt{SnpMatrix} and \texttt{XSnpMatrix} classes from \texttt{snpStats}
by aligning genotype data with two dataframes containing SNP (column)
specific and sample (row) specific information.  Subsetting, binding
etc can then be carried out keeping this additional information
aligned.

If you don't know what the \texttt{snpStats} package does, then this package
is unlikely to be of use.  But if you use \texttt{snpStats}, then, hopefully,
annotSnpStats will make lots of things easier.  Various utility
functions have been added which aim to make the manipulation and
merging of two or more genotype datasets as painless and as accurate
as possible.

\section{Basic data structure}
\label{sec-2}

aSnpMatrix objects consist, at a minimum, of a data matrix
(\texttt{(X)SnpMatrix}), and row-wise sample information \texttt{data.frame} and and
column-wise SNP information \texttt{data.frame}.  The \texttt{example.data()}
function can help you create test objects, but looking at the code
inside the function can help you create objects from your own data
too.

<<>>=
library(annotSnpStats)
## see how an object can be created
example.data()

## create one
X <- example.data(20,100)
X
@ %def

Optionally, you can set a \texttt{phenotype()} which records which column of
the samples \texttt{data.frame} contains a column describing a sample's
phenotype.  \texttt{example.data()} already does this, but you could
change/set it thus:

\section{Phenotype}
\label{sec-3}

<<>>=
phenotype(X) <- "cc"
@ %def

\section{Allele codes}
\label{sec-4}
Genotype data is stored in a (compressed) format with 1=AA, 2=AB and
3=BB genotypes.  If you wish to merge two datasets, you need to know
what each code corresponds to.  This information should be stored in a
pair of columns in the \texttt{snps} slot of the object.  The first member
should show the base (A, C, G or T) corresponding to an AA homozygote,
and the second the base corresponding to a BB homozygote.  \texttt{aSnpStats}
functions can try and guess which columns might be storing this
information, but it is safer to specify explicitly.

<<>>=
# set the allele codes
alleles(X) <- c("A1","A2")
@ %def

\section{Examples of use}
\label{sec-5}

The advantage of using \texttt{annotSnpStats} is perhaps best seen using some
example data from the \texttt{snpStats} package to define some new
\texttt{aSnpMatrix} objects and play with them.

\subsection{Access annotation objects}
\label{sec-5-1}

<<>>=
head(snps(X))
head(samples(X))
@ %def

\subsection{Use in place of regular SnpMatrix objects}
\label{sec-5-2}

All \texttt{snpStats} S4 methods should work with \texttt{aSnpMatrix} objects

<<>>=
summary(X)
@ %def

However, certain \texttt{snpStats} functions do not use the S4 interface, and
inheritance then gets a bit messed up.  In that case, you may need to
explicity extract the \texttt{SnpMatrix} object.  This can be done with \texttt{as(,Class}"SnpMatrix")=
or, for convenience, use \texttt{sm()}
For example, to use
snpStats's \texttt{ld} function:

<<>>=
ld(sm(X)[1:5,1:5],depth=3,stats="R.squared")
@ %def

\subsection{Subsetting}
\label{sec-5-3}

Subsetting subsets both the \texttt{SnpMatrix} and the annotation objects

<<>>=
asub <- X[1:3,1:5]
dim(X)
dim(asub)
nrow(snps(X))
nrow(snps(asub))
nrow(samples(X))
nrow(samples(asub))
@ %def

\subsection{Binding}
\label{sec-5-4}
You can c/rbind \texttt{aSnpMatrix} objects using the S4 \texttt{cbind2} and
\texttt{rbind2} methods:

<<>>=
## add additional SNPs
Xw <- example.data(20,101:200)
cbind2(X,Xw)

## add additional samples
Xl <- example.data(21:40,100)
rbind2(X,Xl)
@ %def

\section{Matching SNPs and samples between datasets}
\label{sec-6}

annotSnpStats was created primarily to make the manipulation and
joining of multiple genetic datasets easier. Identifying which samples
and SNPs are duplicated between datasets can be very important to
avoid double counting.

\texttt{sample.match} identifies indices of overlapping samples in two
  aSnpMatrix objects.  By default, match is on \texttt{rownames(samples(x))},
  \texttt{rownames(samples(y))}.

<<>>=
sample.match(X,Xw) # should have matches
sample.match(X,Xl) # should have no matches
@ %def

\texttt{snp.match} identifies indices of overlapping samples in two
  aSnpMatrix objects.  By default, match is on \texttt{rownames(snps(x))},
  \texttt{rownames(snps(y))}.

<<>>=
snp.match(X,Xw) # should have no matches
snp.match(X,Xl) # should have matches
@ %def

However, often the same samples can appear in different datasets with
different ids. \texttt{dups} finds indices of possible sample duplications
between two aSnpStats objects by comparing genotypes. By default, two
homozygote genotypes are called a match, regardless of which
homozygotes they are.  This is useful if you are not sure that allele
codes are comparable across the datasets.

<<>>=
Y <- example.data(30:11,100)
dups(X,Y) # should match rows 11:20 of X with rows 20:11 of Y

## now, reorder the allele labelling
Y <- switch.alleles(Y,1:50)
dups(X,Y) # should STILL match rows 11:20 of X with rows 1:10 of Y
@ %def

You can specify that matches take account of all genotype states, not just hethom (the default) by

<<>>=
dups(X,Y,type="all") # should find NO matches
@ %def

\section{Aligning alleles}
\label{sec-7}

Differences in allele coding is one of the most frustrating problems
with dealing with genetic data from different sources.  One issue is
simple differences in numeric coding, eg in \texttt{X} allele A is 1 and
allele G is 2, whereas in \texttt{Y} allele A is 2 and G is 1.  I call this a
code reverse.  However, sometimes alleles can be recorded from
different strands, so in \texttt{Y} allele T is 1 and allele C is 2, this is
a "complement".  Just for fun, we sometimes have both happen.

<<>>=
alleles.X <- c(snp1="A/G",snp2="A/G",snp3="A/G",snp4="A/G")
alleles.Y <- c(snp1="A/G",snp2="G/A",snp3="T/C",snp4="C/T")
classes <- g.class(x=alleles.X,y=alleles.Y)
cbind(alleles.X,alleles.Y,classes)
@ %def

This is ok when a SNP is A/G, each class can be resolved.  But an
A/T SNP is harder, because a reverse looks the same as a complement:

<<>>=
alleles.X <- c(snp1="A/T",snp2="A/T",snp3="A/T",snp4="A/T")
alleles.Y <- c(snp1="A/T",snp2="T/A",snp3="T/A",snp4="A/T")
classes <- g.class(x=alleles.X,y=alleles.Y)
cbind(alleles.X,alleles.Y,classes)
@ %def

annotSnpStats first uses information from SNPs which have unambiguous
allele codes.  If there are no strand switches amongst these SNPs, it
assumes everything is on the same strand and resolveable.  A
diagnostic plot is useful to check the alignment has worked.

<<fig=TRUE>>=
Y.aligned <- align.alleles(X,Y)
@ %def

Where there are strand switches, annotSnpStats uses allele frequencies
to try and resolve the ambigous alignments, but this can only work
where (a) sample sizes are reasonably large and from the same
populations and (b) minor allele frequencies not too close to 0.5.
Some inference can also be made if you have know duplicates between
the two datasets, thus:

<<fig=TRUE>>=
XY.dups <- dups(X,Y)
if(nrow(XY.dups)) {
  Y.aligned <- align.alleles(X,Y,known.dups=XY.dups)
} else {
  Y.aligned <- align.alleles(X,Y)
}
@ %def


\section{Other functions}
\label{sec-8}

\texttt{snp.trim} drops SNPs from an annotSnpStats object according to SNP
qc summary stats according to user specified limits.  See help file.
% Emacs 24.3.1 (Org mode 8.2.7c)
\end{document}
